{
	"schemes": ["https", "http"],
	"swagger": "2.0",
	"info": {
		"description": "API Documentation",
		"title": "Master API",
		"termsOfService": "https://e-invitation.com/tnc.html",
		"contact": {
			"name": "Developer",
			"email": "e-invitation@gmail.com"
		},
		"version": "1.0.0"
	},
	"host": "localhost:9902",
	"basePath": "/api/v1/",
	"paths": {
		"/auth/forgot-password": {
			"post": {
				"description": "Update password",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Update password",
				"parameters": [
					{
						"description": "Forgot Password Code Data",
						"name": "data",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/model.ForgotPassword"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"description": "Login to get credentials",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Login to get credentials",
				"parameters": [
					{
						"description": "User login",
						"name": "data",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/model.Login"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object",
							"additionalProperties": true
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"409": {
						"description": "Conflict",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/logout": {
			"get": {
				"description": "Logout to destroy credentials",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Logout to destroy credentials",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/reset-password": {
			"post": {
				"description": "Generate random password and send password to email",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Generate random password and send password to email",
				"parameters": [
					{
						"description": "Reset Password Code Data",
						"name": "data",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/model.ResetPassword"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/send-code/{typeCode}": {
			"post": {
				"description": "Send Code to email",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Send Code to email",
				"parameters": [
					{
						"description": "Email",
						"name": "data",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/model.Email"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/sign-up": {
			"post": {
				"description": "Create new User",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Create new User",
				"parameters": [
					{
						"description": "User data",
						"name": "data",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/model.UserAPI"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User data",
						"schema": {
							"$ref": "#/definitions/model.User"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"409": {
						"description": "Conflict",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/verify-code/{typeCode}": {
			"post": {
				"description": "Verify Code from email",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Verify Code from email",
				"parameters": [
					{
						"description": "User Code",
						"name": "data",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/model.UserCode"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/verify-role/{id}": {
			"get": {
				"description": "Check if credentials is existing user and what is role",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Check if credentials is existing user and what is role",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/verify-token": {
			"get": {
				"description": "Check if credentials is correct",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Check if credentials is correct",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/auth/verify-user": {
			"get": {
				"description": "Check if credentials is existing user",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["Auth"],
				"summary": "Check if credentials is existing user",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/master/": {
			"get": {
				"description": "show basic response",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["API"],
				"summary": "show basic response",
				"responses": {
					"200": {
						"description": "success",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "bad request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "not found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"409": {
						"description": "conflict",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "internal error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/master/cities": {
			"get": {
				"description": "Find All City",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["City"],
				"summary": "Find All City",
				"parameters": [
					{
						"type": "integer",
						"description": "Page number start from zero",
						"name": "page",
						"in": "query"
					},
					{
						"type": "integer",
						"description": "Size per page, default `0`",
						"name": "size",
						"in": "query"
					},
					{
						"type": "string",
						"description": "Sort by field, adding dash (`-`) at the beginning means descending and vice versa",
						"name": "sort",
						"in": "query"
					},
					{
						"type": "string",
						"description": "Select specific fields with comma separated",
						"name": "fields",
						"in": "query"
					},
					{
						"type": "string",
						"description": "custom filters, see [more details](https://github.com/morkid/paginate#filter-format)",
						"name": "filters",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/master/cities/{id}": {
			"get": {
				"description": "Get a City by id",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["City"],
				"summary": "Get a City by id",
				"parameters": [
					{
						"type": "string",
						"description": "City ID",
						"name": "id",
						"in": "path",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "City Data",
						"schema": {
							"$ref": "#/definitions/model.City"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			},
			"put": {
				"description": "Update City by id",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["City"],
				"summary": "Update City by id",
				"parameters": [
					{
						"type": "string",
						"description": "City ID",
						"name": "id",
						"in": "path",
						"required": true
					},
					{
						"description": "City data",
						"name": "data",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/model.CityAPI"
						}
					}
				],
				"responses": {
					"200": {
						"description": "City data",
						"schema": {
							"$ref": "#/definitions/model.City"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"409": {
						"description": "Conflict",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"default": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		},
		"/master/info.json": {
			"get": {
				"description": "show info response",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"tags": ["API"],
				"summary": "show info response",
				"responses": {
					"200": {
						"description": "success",
						"schema": {
							"type": "object",
							"additionalProperties": true
						}
					},
					"400": {
						"description": "bad request",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"404": {
						"description": "not found",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"409": {
						"description": "conflict",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					},
					"500": {
						"description": "internal error",
						"schema": {
							"$ref": "#/definitions/lib.Response"
						}
					}
				}
			}
		}
	},
	"definitions": {
		"lib.Response": {
			"type": "object",
			"properties": {
				"message": {
					"description": "response message",
					"type": "string"
				},
				"status": {
					"description": "http status",
					"type": "integer"
				}
			}
		},
		"model.City": {
			"type": "object",
			"properties": {
				"code": {
					"description": "City Code",
					"type": "string",
					"example": "JakTim"
				},
				"name": {
					"description": "City Name",
					"type": "string",
					"example": "Jakarta Timur"
				},
				"created_at": {
					"description": "created at automatically inserted on post",
					"type": "string",
					"format": "date-time"
				},
				"id": {
					"description": "model ID",
					"type": "string",
					"format": "uuid"
				},
				"sort": {
					"description": "sort (increment)",
					"type": "integer",
					"example": 1
				},
				"province": {
					"description": "state province",
					"$ref": "#/definitions/model.Province"
				},
				"province_id": {
					"description": " Province ID",
					"type": "string",
					"format": "uuid"
				},
				"status": {
					"description": "status (0: deleted, 1: active, 2: draft. 3: blocked, 4: canceled)",
					"type": "integer",
					"example": 1
				},
				"updated_at": {
					"description": "updated at automatically changed on put or add on post",
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"model.CityAPI": {
			"type": "object",
			"properties": {
				"code": {
					"description": "City Code",
					"type": "string",
					"example": "JakTim"
				},
				"name": {
					"description": "City Name",
					"type": "string",
					"example": "Jakarta Timur"
				},
				"province_id": {
					"description": " Province ID",
					"type": "string",
					"format": "uuid"
				}
			}
		},
		"model.Email": {
			"type": "object",
			"required": ["email"],
			"properties": {
				"email": {
					"type": "string"
				}
			}
		},
		"model.ForgotPassword": {
			"type": "object",
			"required": ["email", "password"],
			"properties": {
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"reset_password_code": {
					"type": "string"
				},
				"reset_password_expiration": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"model.Login": {
			"type": "object",
			"required": ["email", "password"],
			"properties": {
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				}
			}
		},
		"model.ResetPassword": {
			"type": "object",
			"required": ["email"],
			"properties": {
				"email": {
					"type": "string"
				},
				"reset_password_code": {
					"type": "string"
				},
				"reset_password_expiration": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"model.Province": {
			"type": "object",
			"properties": {
				"created_at": {
					"description": "created at automatically inserted on post",
					"type": "string",
					"format": "date-time"
				},
				"id": {
					"description": "model ID",
					"type": "string",
					"format": "uuid"
				},
				"sort": {
					"description": "sort (increment)",
					"type": "integer",
					"example": 1
				},
				"province_code": {
					"description": " Province Code",
					"type": "string",
					"example": "JOG"
				},
				"province_name": {
					"description": " Province Name",
					"type": "string",
					"example": "Jogjakarta"
				},
				"status": {
					"description": "status (0: deleted, 1: active, 2: draft. 3: blocked, 4: canceled)",
					"type": "integer",
					"example": 1
				},
				"updated_at": {
					"description": "updated at automatically changed on put or add on post",
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"model.User": {
			"type": "object",
			"required": ["email", "login", "password"],
			"properties": {
				"access_code": {
					"type": "string"
				},
				"activated_at": {
					"type": "string",
					"format": "date-time"
				},
				"activation_code": {
					"type": "string"
				},
				"created_at": {
					"description": "created at automatically inserted on post",
					"type": "string",
					"format": "date-time"
				},
				"email": {
					"type": "string"
				},
				"id": {
					"description": "model ID",
					"type": "string",
					"format": "uuid"
				},
				"invited_at": {
					"type": "string",
					"format": "date-time"
				},
				"is_activated": {
					"type": "boolean"
				},
				"is_anonymous": {
					"type": "boolean"
				},
				"is_api": {
					"type": "boolean"
				},
				"is_password_system_generated": {
					"type": "boolean"
				},
				"is_superuser": {
					"type": "boolean"
				},
				"last_access": {
					"type": "string",
					"format": "date-time"
				},
				"last_login": {
					"type": "string",
					"format": "date-time"
				},
				"last_page": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"otp_code": {
					"type": "string"
				},
				"otp_enabled": {
					"type": "boolean"
				},
				"otp_expiration": {
					"type": "string",
					"format": "date-time"
				},
				"password": {
					"type": "string"
				},
				"password_expiration": {
					"type": "string",
					"format": "date-time"
				},
				"password_last_change": {
					"type": "string",
					"format": "date-time"
				},
				"persist_code": {
					"type": "string"
				},
				"person_id": {
					"type": "string"
				},
				"picture_id": {
					"type": "string"
				},
				"reset_password_code": {
					"type": "string"
				},
				"reset_password_expiration": {
					"type": "string",
					"format": "date-time"
				},
				"role_id": {
					"type": "string"
				},
				"salt": {
					"type": "string"
				},
				"session_persistence_expiration": {
					"type": "string",
					"format": "date-time"
				},
				"sort": {
					"description": "sort (increment)",
					"type": "integer",
					"example": 1
				},
				"status": {
					"description": "status (0: deleted, 1: active, 2: draft. 3: blocked, 4: canceled)",
					"type": "integer",
					"example": 1
				},
				"updated_at": {
					"description": "updated at automatically changed on put or add on post",
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"model.UserAPI": {
			"type": "object",
			"required": ["email", "login", "password"],
			"properties": {
				"access_code": {
					"type": "string"
				},
				"activated_at": {
					"type": "string",
					"format": "date-time"
				},
				"activation_code": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"invited_at": {
					"type": "string",
					"format": "date-time"
				},
				"is_activated": {
					"type": "boolean"
				},
				"is_anonymous": {
					"type": "boolean"
				},
				"is_api": {
					"type": "boolean"
				},
				"is_password_system_generated": {
					"type": "boolean"
				},
				"is_superuser": {
					"type": "boolean"
				},
				"last_access": {
					"type": "string",
					"format": "date-time"
				},
				"last_login": {
					"type": "string",
					"format": "date-time"
				},
				"last_page": {
					"type": "string"
				},
				"login": {
					"type": "string"
				},
				"otp_code": {
					"type": "string"
				},
				"otp_enabled": {
					"type": "boolean"
				},
				"otp_expiration": {
					"type": "string",
					"format": "date-time"
				},
				"password": {
					"type": "string"
				},
				"password_expiration": {
					"type": "string",
					"format": "date-time"
				},
				"password_last_change": {
					"type": "string",
					"format": "date-time"
				},
				"persist_code": {
					"type": "string"
				},
				"person_id": {
					"type": "string"
				},
				"picture_id": {
					"type": "string"
				},
				"reset_password_code": {
					"type": "string"
				},
				"reset_password_expiration": {
					"type": "string",
					"format": "date-time"
				},
				"role_id": {
					"type": "string"
				},
				"salt": {
					"type": "string"
				},
				"session_persistence_expiration": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"model.UserCode": {
			"type": "object",
			"required": ["email"],
			"properties": {
				"access_code": {
					"type": "string"
				},
				"activated_at": {
					"type": "string",
					"format": "date-time"
				},
				"activation_code": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"is_activated": {
					"type": "boolean"
				},
				"otp_code": {
					"type": "string"
				},
				"otp_expiration": {
					"type": "string",
					"format": "date-time"
				},
				"reset_password_code": {
					"type": "string"
				},
				"reset_password_expiration": {
					"type": "string",
					"format": "date-time"
				}
			}
		}
	},
	"securityDefinitions": {
		"ApiKeyAuth": {
			"type": "apiKey",
			"name": "Authorization",
			"in": "header"
		}
	}
}
